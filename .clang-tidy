---
Checks:
  - "-*"
  # - "misc-include-cleaner"
  # - "bugprone-argument-comment"
  # - "bugprone-assert-side-effect"
  # - "bugprone-assignment-in-if-condition"
  # - "bugprone-bad-signal-to-kill-thread"
  # - "bugprone-bool-pointer-implicit-conversion"
  # - "bugprone-branch-clone"
  # - "bugprone-casting-through-void"
  # - "bugprone-chained-comparison"
  # - "bugprone-compare-pointer-to-member-virtual-function"
  # - "bugprone-copy-constructor-init"
  # - "bugprone-crtp-constructor-accessibility"
  # - "bugprone-dangling-handle"
  # - "bugprone-dynamic-static-initializers"
  # - "-bugprone-easily-swappable-parameters"
  # - "bugprone-empty-catch"
  # - "-bugprone-exception-escape" # For now
  # - "bugprone-fold-init-type"
  # - "bugprone-forward-declaration-namespace"
  # - "bugprone-forwarding-reference-overload"
  # - "bugprone-implicit-widening-of-multiplication-result"
  # - "bugprone-inaccurate-erase"
  # - "bugprone-inc-dec-in-conditions"
  # - "bugprone-incorrect-enable-if"
  # - "bugprone-incorrect-roundings"
  # - "bugprone-infinite-loop"
  # - "bugprone-unhandled-self-assignment"
  # - "bugprone-unchecked-optional-access"
  # - "bugprone-switch-missing-default-case"
  # - "bugprone-misplaced-widening-cast"
  # - "bugprone-reserved-identifier"
  # - "bugprone-signed-char-misuse"
  # - "bugprone-optional-value-conversion"
  # - "bugprone-integer-division"
  # - "bugprone-lambda-function-name"
  # - "bugprone-macro-parentheses"
  # - "bugprone-macro-repeated-side-effects"
  # - "bugprone-misplaced-operator-in-strlen-in-alloc"
  # - "bugprone-misplaced-pointer-arithmetic-in-alloc"
  # - "bugprone-move-forwarding-reference"
  # - "bugprone-multi-level-implicit-pointer-conversion"
  # - "bugprone-multiple-new-in-one-expression"
  # - "bugprone-multiple-statement-macro"
  # - "bugprone-no-escape"
  # - "bugprone-non-zero-enum-to-bool-conversion"
  # - "bugprone-not-null-terminated-result"
  # - "bugprone-parent-virtual-call"
  # - "bugprone-pointer-arithmetic-on-polymorphic-object"
  # - "bugprone-posix-return"
  # - "bugprone-redundant-branch-condition"
  # - "bugprone-reserved-identifier"
  # - "bugprone-return-const-ref-from-parameter"
  # - "bugprone-shared-ptr-array-mismatch"
  # - "bugprone-signal-handler"
  # - "bugprone-signed-char-misuse"
  # - "bugprone-sizeof-container"
  # - "bugprone-sizeof-expression"
  # - "bugprone-spuriously-wake-up-functions"
  # - "bugprone-standalone-empty"
  # - "bugprone-string-constructor"
  # - "bugprone-string-integer-assignment"
  # - "bugprone-string-literal-with-embedded-nul"
  # - "bugprone-stringview-nullptr"
  # - "bugprone-suspicious-enum-usage"
  # - "bugprone-suspicious-include"
  # - "bugprone-suspicious-memory-comparison"
  # - "bugprone-suspicious-memset-usage"
  # - "bugprone-suspicious-missing-comma"
  # - "bugprone-suspicious-realloc-usage"
  # - "bugprone-suspicious-semicolon"
  # - "bugprone-suspicious-string-compare"
  # - "bugprone-suspicious-stringview-data-usage"
  # - "bugprone-swapped-arguments"
  # - "bugprone-terminating-continue"
  # - "bugprone-throw-keyword-missing"
  # - "bugprone-too-small-loop-variable"
  # - "bugprone-undefined-memory-manipulation"
  # - "bugprone-undelegated-constructor"
  # - "bugprone-unhandled-exception-at-new"
  # - "bugprone-unique-ptr-array-mismatch"
  # - "bugprone-unsafe-functions"
  # - "bugprone-unused-local-non-trivial-variable"
  # - "bugprone-unused-raii"
  # - "bugprone-unused-return-value"
  # - "bugprone-use-after-move"
  # - "bugprone-virtual-near-miss"
  # - "cert-dcl50-cpp"
  # - "cert-dcl58-cpp"
  # - "cert-env33-c"
  # - "cert-err33-c"
  # - "cert-err34-c"
  # - "cert-err52-cpp"
  # - "-cert-err58-cpp"
  # - "cert-err60-cpp"
  # - "cert-flp30-c"
  # - "cert-mem57-cpp"
  # - "cert-msc50-cpp"
  # - "cert-msc51-cpp"
  # - "cert-oop57-cpp"
  # - "cert-oop58-cpp"
  # - "concurrency-mt-unsafe"
  # - "concurrency-thread-canceltype-asynchronous"
  # - "cppcoreguidelines-macro-usage"
  # - "modernize-use-equals-default"
  # - "cppcoreguidelines-virtual-class-destructor"
  # - "cppcoreguidelines-prefer-member-initializer"
  # - "cppcoreguidelines-avoid-const-or-ref-data-members"
  # - "-cppcoreguidelines-pro-bounds-pointer-arithmetic"
  # - "cppcoreguidelines-avoid-non-const-global-variables"
  # - "cppcoreguidelines-init-variables"
  # - "-cppcoreguidelines-pro-type-reinterpret-cast"
  # - "cppcoreguidelines-rvalue-reference-param-not-moved"
  # - "cppcoreguidelines-narrowing-conversions"
  # - "cppcoreguidelines-missing-std-forward"

  - "cppcoreguidelines-pro-type-member-init"


  # - "-cppcoreguidelines-special-member-functions" # Handle later
  # - "cppcoreguidelines-avoid-capturing-lambda-coroutines"
  # - "cppcoreguidelines-avoid-do-while"
  # - "cppcoreguidelines-avoid-goto"
  # - "cppcoreguidelines-avoid-reference-coroutine-parameters"
  # - "cppcoreguidelines-interfaces-global-init"
  # - "cppcoreguidelines-misleading-capture-default-by-value"
  # - "cppcoreguidelines-no-malloc"
  # - "cppcoreguidelines-no-suspend-with-lock"
  # - "cppcoreguidelines-owning-memory"
  # - "cppcoreguidelines-pro-bounds-array-to-pointer-decay"
  # - "-cppcoreguidelines-pro-bounds-constant-array-index"
  # - "cppcoreguidelines-pro-type-const-cast"
  # - "cppcoreguidelines-pro-type-cstyle-cast"
  # - "cppcoreguidelines-pro-type-static-cast-downcast"
  # - "cppcoreguidelines-pro-type-union-access"
  # - "cppcoreguidelines-pro-type-vararg"
  # - "cppcoreguidelines-slicing"


WarningsAsErrors: "*"
FormatStyle: none
CheckOptions:
  - key: readability-implicit-bool-conversion.AllowPointerConditions
    value: "true"
  - key: cppcoreguidelines-rvalue-reference-param-not-moved.AllowPartialMove
    value: "true"
  - key: cppcoreguidelines-rvalue-reference-param-not-moved.IgnoreNonDeducedTemplateTypes
    value: "true"
  - key: cppcoreguidelines-rvalue-reference-param-not-moved.IgnoreUnnamedParams
    value: "true"
  - key: modernize-use-auto.RemoveStars
    value: "true"
  - key: misc-include-cleaner.IgnoreHeaders
    value: ".*cesium-async\\+\\+\\.h"
  - key: cppcoreguidelines-macro-usage.AllowedRegexp
    value: "^CESIUM_.*"
HeaderFilterRegex: ".*"
HeaderFileExtensions: ["h"]
ImplementationFileExtensions: ["cpp"]
